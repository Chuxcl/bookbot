[4mfor[24m(n)                                          Tcl Built-In Commands                                          [4mfor[24m(n)

_____________________________________________________________________________________________________________________

[1mNAME[0m
       for - 'For' loop

[1mSYNOPSIS[0m
       [1mfor [4m[22mstart[24m [4mtest[24m [4mnext[24m [4mbody[0m
_____________________________________________________________________________________________________________________

[1mDESCRIPTION[0m
       [1mFor  [22mis  a  looping command, similar in structure to the C [1mfor [22mstatement.  The [4mstart[24m, [4mnext[24m, and [4mbody[24m arguments
       must be Tcl command strings, and [4mtest[24m is an expression string.  The [1mfor [22mcommand first invokes the  Tcl  inter‚Äê
       preter to execute [4mstart[24m.  Then it repeatedly evaluates [4mtest[24m as an expression; if the result is non-zero it in‚Äê
       vokes  the Tcl interpreter on [4mbody[24m, then invokes the Tcl interpreter on [4mnext[24m, then repeats the loop.  The com‚Äê
       mand terminates when [4mtest[24m evaluates to 0.  If a [1mcontinue [22mcommand is invoked within  [4mbody[24m  then  any  remaining
       commands in the current execution of [4mbody[24m are skipped; processing continues by invoking the Tcl interpreter on
       [4mnext[24m,  then  evaluating [4mtest[24m, and so on.  If a [1mbreak [22mcommand is invoked within [4mbody[24m or [4mnext[24m, then the [1mfor [22mcom‚Äê
       mand will return immediately.  The operation of [1mbreak [22mand [1mcontinue [22mare similar to the corresponding statements
       in C.  [1mFor [22mreturns an empty string.

       Note: [4mtest[24m should almost always be enclosed in braces.  If not, variable substitutions will be made before the
       [1mfor [22mcommand starts executing, which means that variable changes made by the loop body will not  be  considered
       in  the  expression.   This  is likely to result in an infinite loop.  If [4mtest[24m is enclosed in braces, variable
       substitutions are delayed until the expression is evaluated (before each loop iteration), so  changes  in  the
       variables will be visible.  See below for an example:

[1mEXAMPLES[0m
       Print a line for each of the integers from 0 to 9:

              [1mfor [22m{set x 0} {$x<10} {incr x} {
                  puts "x is $x"
              }

       Either  loop infinitely or not at all because the expression being evaluated is actually the constant, or even
       generate an error!  The actual behaviour will depend on whether the variable [4mx[24m exists before the  [1mfor  [22mcommand
       is  run  and  whether its value is a value that is less than or greater than/equal to ten, and this is because
       the expression will be substituted before the [1mfor [22mcommand is executed.

              [1mfor [22m{set x 0} $x<10 {incr x} {
                  puts "x is $x"
              }

       Print out the powers of two from 1 to 1024:

              [1mfor [22m{set x 1} {$x<=1024} {set x [expr {$x * 2}]} {
                  puts "x is $x"
              }

[1mSEE ALSO[0m
       break(n), continue(n), foreach(n), while(n)

[1mKEYWORDS[0m
       boolean, for, iteration, loop

Tcl                                                                                                            [4mfor[24m(n)
